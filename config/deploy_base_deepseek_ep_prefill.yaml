apiVersion: leaderworkerset.x-k8s.io/v1
kind: LeaderWorkerSet
metadata:
    name: vllm-deepseek-ep-prefill
    annotations:
      # For better performance on small EP sizes (<=32) it may be desirable to
      # have LWS exclusively schedule onto the sub block. At the current time
      # expert parallel deployment has not been shown to require sub block
      # placement for peak performance and so it is disabled here to reduce
      # failures to schedule in test and development environments.
      #
      # leaderworkerset.sigs.k8s.io/exclusive-topology: cloud.google.com/gce-topology-subblock
spec:
    replicas: 1
    leaderWorkerTemplate:
        size: 2
        restartPolicy: None #RecreateGroupOnPodRestart

        workerTemplate:
            metadata:
              labels:
                app: vllm-deepseek-ep
                component: vllm-deepseek-ep-prefill
                llm-d.ai/role: prefill
                server: vllm
              annotations:
                networking.gke.io/default-interface: 'eth0'
                networking.gke.io/interfaces: |
                  [
                    {"interfaceName":"eth0","network":"default"},
                    {"interfaceName":"eth2","network":"rdma-0"},
                    {"interfaceName":"eth3","network":"rdma-1"},
                    {"interfaceName":"eth4","network":"rdma-2"},
                    {"interfaceName":"eth5","network":"rdma-3"},
                    {"interfaceName":"eth6","network":"rdma-4"},
                    {"interfaceName":"eth7","network":"rdma-5"},
                    {"interfaceName":"eth8","network":"rdma-6"},
                    {"interfaceName":"eth9","network":"rdma-7"}
                  ]
            spec:
              # Prefer that all instances land in the same network sub block for
              # best performance.
              affinity:
                podAffinity:
                  # Subblock affinity cannot guarantee all pods in the replica
                  # are in the same subblock, but is better than random spreading
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - weight: 2
                    podAffinityTerm:
                      labelSelector:
                        matchLabels:
                          app: vllm-deepseek-ep
                      matchLabelKeys:
                      - component
                      topologyKey: cloud.google.com/gce-topology-block
                  - weight: 1
                    podAffinityTerm:
                      labelSelector:
                        matchLabels:
                          app: vllm-deepseek-ep
                      matchLabelKeys:
                      - component
                      topologyKey: cloud.google.com/gce-topology-subblock

              containers:
              - name: vllm-worker
                image: gcr.io/claytoncoleman-gke-dev/github.com/smarterclayton/vllm-dp-lws:release-v0.11.0
                imagePullPolicy: Always
                workingDir: /code
                stdin: true
                tty: true
                command: ["/bin/bash","-c"]
                args:
                  - |
                    set -euo pipefail

                    if [[ -n "${DROP_KERNEL_CACHE}" ]]; then
                      find /root/.nv/ComputeCache/ -delete
                    fi

                    # Debugging tools for the environment, libnl required for set_nccl_env.sh
                    if command -v apt-get >/dev/null 2>&1; then
                      # Using https://github.com/smarterclayton/vllm-dp-lws/tree/working_branch
                      apt-get install -y dnsutils python3.12-dbg
                    else
                      dnf install -qy gdb
                      # dnf debuginfo-install -qy python3.12-3.12.9-1.el9_6.1.x86_64
                    fi

                    # Create ~/.bashrc so that kubectl exec -- /bin/bash is ready to run
                    cat <<'EOF' > ~/.bashrc
                    #!/bin/bash

                    bind '"\e[A":history-search-backward'
                    bind '"\e[B":history-search-forward'

                    shopt -s histappend
                    export HISTFILESIZE=1000000
                    export HISTSIZE=1000000
                    export HISTCONTROL=ignoreboth
                    shopt -s cmdhist

                    if command -v apt-get >/dev/null 2>&1; then
                      export VLLM_HOME=/app/venv
                    else
                      # Assume we're using the RH midstream image
                      export VLLM_HOME=/opt/vllm
                      export HF_HUB_OFFLINE=0
                    fi

                    # Configure gIB (assuming v1.10 because of NCCL 2.27 for vLLM main)
                    export PATH=/usr/local/nvidia/bin:${PATH}:/usr/local/gib/bin
                    source /usr/local/gib/scripts/set_nccl_env.sh

                    export START_RANK=$(( ${LWS_WORKER_INDEX:-0} * DP_SIZE_LOCAL ))
                    if [ "${LWS_WORKER_INDEX:-0}" -eq 0 ]; then
                      #################
                      # Leader-only launch
                      #################
                      serve=(
                      ${VLLM_HOME}/bin/vllm serve \
                        ${VLLM_MODEL} \
                        --port 8000 \
                        --disable-log-requests \
                        --data-parallel-hybrid-lb \
                        --speculative-config '$(VLLM_SPECULATIVE_CONFIG)' \
                        --enable-dbo \
                        --async-scheduling \
                        --dbo-decode-token-threshold 32 \
                        # try to keep 40GB free, https://github.com/vllm-project/vllm/issues/25597
                        --kv-cache-memory=63000000000 \
                        --enable-expert-parallel \
                        --enable-eplb \
                        --num-redundant-experts $DP_SIZE \
                        --eplb-window-size 1000 \
                        --eplb-step-interval 3000 \
                        --tensor-parallel-size $TP_SIZE \
                        --data-parallel-size $DP_SIZE \
                        --data-parallel-size-local $DP_SIZE_LOCAL \
                        --data-parallel-address ${LWS_LEADER_ADDRESS} \
                        --data-parallel-rpc-port 5555 \
                        --data-parallel-start-rank $START_RANK \
                        --kv-transfer-config '{"kv_connector":"NixlConnector", "kv_role":"kv_both"}' \
                        --trust-remote-code
                      )
                    else
                      #################
                      # Worker-only launch
                      #################
                      serve=(
                      ${VLLM_HOME}/bin/vllm serve \
                        ${VLLM_MODEL} \
                        --port 8000 \
                        --disable-log-requests \
                        --data-parallel-hybrid-lb \
                        --speculative-config '$(VLLM_SPECULATIVE_CONFIG)' \
                        --enable-dbo \
                        --async-scheduling \
                        --dbo-decode-token-threshold 32 \
                        # try to keep 40GB free, https://github.com/vllm-project/vllm/issues/25597
                        --kv-cache-memory=63000000000 \
                        --enable-expert-parallel \
                        --enable-eplb \
                        --num-redundant-experts $DP_SIZE \
                        --eplb-window-size 1000 \
                        --eplb-step-interval 3000 \
                        --tensor-parallel-size $TP_SIZE \
                        --data-parallel-size $DP_SIZE \
                        --data-parallel-size-local $DP_SIZE_LOCAL \
                        --data-parallel-address ${LWS_LEADER_ADDRESS} \
                        --data-parallel-rpc-port 5555 \
                        --data-parallel-start-rank $START_RANK \
                        --trust-remote-code \
                        --kv-transfer-config '{"kv_connector":"NixlConnector", "kv_role":"kv_both"}'
                      )
                    fi
                    eval "serve+=( ${VLLM_DEBUG_ARGS:-} )"

                    DEFAULT_BALANCER_HOST=vllm-deepseek-ep-decode
                    # Run a benchmark that is decode-only
                    function bench_decode {
                      local headers; local port=${PORT:-8000}; if [[ -n "${DISAGG-}" ]]; then prefill_hosts="$( dig SRV +short +search vllm-deepseek-ep-prefill | cut -d ' ' -f 4 | sed 's/local\.$/local/' | sort | awk "{print \$1 \":${port}\"}" | paste -sd ', ' -)"; headers=" --header x-prefiller-host-port=${prefill_hosts} "; fi
                      VIRTUAL_ENV=/app/venv uv run /app/venv/bin/vllm bench serve ${headers:-} --base-url http://${DEFAULT_BALANCER_HOST}:${port} --model ${VLLM_MODEL} --dataset-name random --seed $(date +%M%H%M%S) --ignore-eos --random-input-len ${TOKENS_IN:-2} --random-output-len ${TOKENS_OUT:-100} --max-concurrency ${MAX_CONCURRENCY:-512} --num-prompts ${NUM_PROMPTS:-$((${MAX_CONCURRENCY:-512} * 3))} --ready-check-timeout-sec 0
                    }
                    # Run a benchmark that is prefill-only
                    function bench_prefill {
                      local headers; local port=${PORT:-8000}; if [[ -n "${DISAGG-}" ]]; then prefill_hosts="$( dig SRV +short +search vllm-deepseek-ep-prefill | cut -d ' ' -f 4 | sed 's/local\.$/local/' | sort | awk "{print \$1 \":${port}\"}" | paste -sd ', ' -)"; headers=" --header x-prefiller-host-port=${prefill_hosts} "; fi
                      VIRTUAL_ENV=/app/venv uv run /app/venv/bin/vllm bench serve ${headers:-} --base-url http://${DEFAULT_BALANCER_HOST}:${port} --model ${VLLM_MODEL} --dataset-name random --seed $(date +%M%H%M%S) --ignore-eos --random-input-len ${TOKENS_IN:-10000} --random-output-len ${TOKENS_OUT:-1} --max-concurrency ${MAX_CONCURRENCY:-$((${DP_SIZE}*3))} --num-prompts ${NUM_PROMPTS:-$((${MAX_CONCURRENCY:-8} * 3))} --ready-check-timeout-sec 0
                    }
                    # Run a benchmark with mixed prefill and decode
                    function bench_mixed {
                      local headers; local port=${PORT:-8000}; if [[ -n "${DISAGG-}" ]]; then prefill_hosts="$( dig SRV +short +search vllm-deepseek-ep-prefill | cut -d ' ' -f 4 | sed 's/local\.$/local/' | sort | awk "{print \$1 \":${port}\"}" | paste -sd ', ' -)"; headers=" --header x-prefiller-host-port=${prefill_hosts} "; fi
                      VIRTUAL_ENV=/app/venv uv run /app/venv/bin/vllm bench serve ${headers:-} --base-url http://${DEFAULT_BALANCER_HOST}:${port} --model ${VLLM_MODEL} --dataset-name random --seed $(date +%M%H%M%S) --ignore-eos --random-input-len ${TOKENS_IN:-1000} --random-output-len ${TOKENS_OUT:-100} --max-concurrency ${MAX_CONCURRENCY:-512} --num-prompts ${NUM_PROMPTS:-$((${MAX_CONCURRENCY:-8} * 3))} --ready-check-timeout-sec 0
                    }
                    function req {
                      unset prefiller; if [[ -n "${DISAGG-}" ]]; then prefiller="X-Prefiller-Host-Port: $( dig SRV +short +search vllm-deepseek-ep-prefill | cut -d ' ' -f 4 | sed 's/local\.$/local/' | sort | awk '{print $1 ":8000"}' | paste -sd ', ' -)"; fi
                      curl -i -H 'Content-Type: application/json' -H 'X-Request-Id: shell_req' -H "${prefiller-}" -d \
                        "{\"temperature\": 0,\"prompt\": \"Write as if you were a critic, and provide extensive details of the time you spent with the subject. Don't forget to provide personal anecdotes.\n\n: San Francisco\",\"max_tokens\": ${TOKENS_OUT:-100},\"model\": \"${VLLM_MODEL}\"}" "$@" \
                        "${DEFAULT_BALANCER_HOST}:${PORT:-8000}/v1/completions"
                    }
                    # Start Qwen3 for a faster and simpler MoE test harness
                    function serve_simple {
                      ${VLLM_HOME}/bin/vllm serve Qwen/Qwen3-30B-A3B-FP8 --port ${PORT:-8000} --enforce-eager --disable-log-requests --enable-expert-parallel --tensor-parallel-size 1 --data-parallel-size 2 --trust-remote-code
                    }
                    # Execute DeepEP's internode latency and tuning test
                    function test_internode {
                      env -u NVSHMEM_DEBUG -u NVSHMEM_DEBUG_SUBSYS -u NVSHMEM_INFO NCCL_DEBUG= \
                        WORLD_SIZE=$(( ${DP_SIZE} / ${DP_SIZE_LOCAL} )) MASTER_ADDR=${LWS_LEADER_ADDRESS} RANK=$(( ${START_RANK} / ${DP_SIZE_LOCAL} )) \
                        VIRTUAL_ENV=/app/venv uv run /app/deepep/tests/test_internode.py
                    }
                    # Use to verify if the node has low internal bandwidth
                    function test_intranode {
                      env -u NVSHMEM_DEBUG -u NVSHMEM_DEBUG_SUBSYS -u NVSHMEM_INFO NCCL_DEBUG= \
                        VIRTUAL_ENV=/app/venv uv run /app/deepep/tests/test_intranode.py
                    }
                    function collect_vllm_env {
                      wget -O collect_env.py https://raw.githubusercontent.com/vllm-project/vllm/main/vllm/collect_env.py && VIRTUAL_ENV=/app/venv uv run collect_env.py
                    }
                    function print_stacks {
                      pgrep 'VLLM' | xargs -P8 -I {} gdb -p {} --batch --eval-command 'py-bt' | grep -v 'New LWP'
                    }
                    function print_cuda_stacks {
                      pgrep 'VLLM' | xargs -P8 -I {} cuda-gdb -p {} --batch --eval-command 'info cuda launch trace' | grep -v 'LWP'
                    }
                    function warmup {
                      DEFAULT_BALANCER_HOST=vllm-deepseek-ep-prefill TOKENS_OUT=1 MAX_CONCURRENCY=50 NUM_PROMPTS=300 bench_mixed
                    }
                    function bench_decode_guide {
                      guidellm benchmark --target "http://${DEFAULT_BALANCER_HOST}:${PORT:-8000}" \
                        --rate-type concurrent \
                        --max-requests "${NUM_PROMPTS:-$(( ${MAX_CONCURRENCY:-10} * 3))}" \
                        --rate "${MAX_CONCURRENCY:-10}" \
                        --data "{\"prompt_tokens\": ${TOKENS_IN:-1}, 
                                  \"output_tokens\": ${TOKENS_OUT:-100},
                                  \"output_tokens_stdev\": \"1\"}" \
                        --output-path "/tmp/out.json" \
                        --output-sampling 10
                    }

                    set +e
                    EOF

                    #######################################################
                    # INSTALL Dependencies that have a _BRANCH variable set
                    #######################################################
                    components=( deepep deepgemm flashinfer vllm )
                    for script in "${components[@]}"; do
                      branch="${script^^}_BRANCH"
                      force="${script^^}_INSTALL"
                      if [[ -z "${!branch-}" && -z "${!force-}" ]]; then
                        continue
                      fi
                      for location in /init-scripts /install-scripts; do
                        if [[ -f ${location}/${script}.sh ]]; then
                          ${location}/${script}.sh
                          break
                        fi
                      done
                    done
                    echo
                    for script in "${components[@]}"; do
                      echo "${script} $( git -C "/app/${script}" log --oneline -1 2>&1 || true )"
                    done
                    echo

                    # If set, hold the container before launch to allow debugging
                    if [[ -n "${INTERACTIVE:-}" ]]; then
                      echo "Waiting for /code/launch to run vLLM"
                      while [[ ! -f /code/launch ]]; do
                        sleep 10
                      done
                      rm /code/launch
                    fi

                    source ~/.bashrc
                    env | sort

                    exec "${serve[@]}"
                env:
                  - name: INTERACTIVE
                    value: ""
                  - name: DROP_KERNEL_CACHE
                    value: ""

                  # Uncomment to force vLLM to build at a specific point
                  # Set to 1 when running from a build significantly older than vLLM HEAD, as
                  # the vLLM kernels may not be compatible with latest
                  # - name: VLLM_USE_PRECOMPILED
                  #   value: "1"
                  # When building packages at runtime, ensure we are compiled for hopper and blackwell
                  - name: TORCH_CUDA_ARCH_LIST
                    value: "9.0a 10.0"

                  # NIXL Configuration
                  - name: VLLM_NIXL_SIDE_CHANNEL_PORT
                    value: "6555"
                  - name: VLLM_NIXL_SIDE_CHANNEL_HOST
                    valueFrom:
                      fieldRef:
                        fieldPath: status.podIP
                  # Force use of TCP for NIXL disaggregation
                  #- name: UCX_TLS
                  #  value: "tcp,cuda_copy"
                  #- name: UCX_NET_DEVICES
                  #  value: "eth0"
                  # GCP RDMA Networking config
                  - name: NVSHMEM_REMOTE_TRANSPORT
                    value: "ibgda"
                  - name: NVSHMEM_IB_ENABLE_IBGDA
                    value: "true"
                  # GCP pairs GPU NICs to PCIe bridges (https://cloud.google.com/compute/docs/gpus/gpu-network-bandwidth#h200-gpus),
                  # which can lead to NVSHMEM's automatic distance assignment algorithm selecting NICs
                  # inefficiently. Instead, instruct NVSHMEM to select the NIC that aligns to the
                  # index of the GPU on the node.
                  - name: NVSHMEM_ENABLE_NIC_PE_MAPPING
                    value: "1"
                  - name: NVSHMEM_HCA_LIST
                    value: "mlx5_0:1,mlx5_1:1,mlx5_2:1,mlx5_3:1,mlx5_4:1,mlx5_5:1,mlx5_6:1,mlx5_7:1"
                  # We prefer to be GPU-initiated, and the GDRCopy mode requires a privileged device
                  # to be mounted into the container. Disable to prevent a warning message during
                  # startup.
                  - name: NVIDIA_DISABLE_GDRCOPY
                    value: "true"
                  - name: NVSHMEM_BOOTSTRAP_UID_SOCK_IFNAME
                    value: "eth0"
                  - name: GLOO_SOCKET_IFNAME
                    value: "eth0"

                  # Debugging logging
                  - name: UCX_LOG_LEVEL
                    value: "info"
                  #- name: UCX_HANDLE_ERRORS
                  #  value: "freeze"
                  #- name: UCX_ERROR_SIGNALS
                  #  value: "SIGSEGV"
                  - name: NVSHMEM_INFO
                    value: "true"
                  - name: NVSHMEM_DEBUG
                    value: "INFO"
                  - name: NVSHMEM_DEBUG_SUBSYS
                    value: "ALL"
                  - name: NCCL_DEBUG
                    value: INFO # trace
                  - name: VLLM_LOGGING_LEVEL
                    value: "DEBUG"
                  - name: HF_HUB_DISABLE_PROGRESS_BARS
                    value: "1"
                  - name: VLLM_DEBUG_ARGS
                    value: ""
                  # Uncomment to debug NCCL hangs or crashes
                  #- name: NCCL_BLOCKING_WAIT
                  #  value: "1"
                  # Uncomment to identify where CPP calls are crashing
                  #- name: TORCH_SHOW_CPP_STACKTRACES
                  #  value: "1"
                  # Uncomment to get more accurate crash traces
                  # - name: CUDA_LAUNCH_BLOCKING
                  #  value: "1"
                  # - name: CUDA_ENABLE_USER_TRIGGERED_COREDUMP
                  #   value: "1"
                  - name: VLLM_TORCH_PROFILER_DIR
                    value: "/code/traces"
                  # Disable GCP NCCL telemetry due to failures to upload blocking
                  # workload start
                  - name: NCCL_TELEMETRY_MODE
                    value: "0"

                  # The model and any specific config
                  - name: VLLM_MODEL
                    value: "deepseek-ai/DeepSeek-V3.1"
                    #value: "nvidia/DeepSeek-R1-FP4"
                  # Use this when running DeepSeek @ FP4
                  #- name: VLLM_USE_FLASHINFER_MOE_FP4
                  #  value: "1"

                  # vLLM performance tuning
                  - name: VLLM_USE_DEEP_GEMM
                    value: "1"
                  # Select an all2all backend optimized for latency or throughput
                  - name: VLLM_ALL2ALL_BACKEND
                    # value: "naive"
                    # value: "pplx"
                    value: "deepep_high_throughput"
                    # value: deepep_low_latency
                  - name: VLLM_ATTENTION_BACKEND
                    value: CUTLASS_MLA
                    #value: FLASHINFER_MLA
                    #value: TRITON_MLA
                  # Avoid known hangs with CUTLASS_MLA on B200 by forcing splits to be 1
                  - name: FORCE_NUM_KV_SPLITS
                    value: "1"
                  - name: DP_SIZE
                    value: "16"
                  - name: TP_SIZE
                    value: "1"
                  - name: DP_SIZE_LOCAL
                    value: "8"
                  - name: VLLM_MOE_DP_CHUNK_SIZE
                    value: "5000"
                  - name: VLLM_RANDOMIZE_DP_DUMMY_INPUTS
                    value: "1"
                  - name: VLLM_SPECULATIVE_CONFIG
                    value: "" #'{"method":"deepseek_mtp","num_speculative_tokens":1}'
                  # Remove a NCCL AllReduce getting in the way of async scheduling
                  - name: VLLM_DISABLE_NCCL_FOR_DP_SYNCHRONIZATION
                    value: "1"

                  # Use cache directories from the host Cache directories
                  - name: CCACHE_DIR
                    value: /root/.nv/ComputeCache/.ccache
                  - name: VLLM_CACHE_ROOT
                    value: /root/.nv/ComputeCache/.vllm
                  - name: FLASHINFER_WORKSPACE_BASE
                    value: /root/.nv/ComputeCache
                  - name: TRITON_CACHE_DIR
                    value: /root/.nv/ComputeCache/.triton
                  - name: DG_JIT_CACHE_DIR
                    value: /root/.nv/ComputeCache/.deepgemm
                  - name: HF_HUB_CACHE
                    value: /huggingface-cache

                  # Mount secrets for loading images
                  - name: HF_TOKEN
                    valueFrom:
                      secretKeyRef:
                        name: llm-d-hf-token
                        key: HF_TOKEN
                        optional: true

                terminationMessagePolicy: FallbackToLogsOnError
                lifecycle:
                  preStop:
                    sleep:
                      seconds: 1
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 8000
                    scheme: HTTP
                  periodSeconds: 1
                  successThreshold: 1
                  failureThreshold: 1
                  timeoutSeconds: 1

                # may not be needed on GKE
                securityContext:
                  runAsUser: 0  # needed for RH image to be able to override files (runs as vllm)
                  # NVSHMEM IBGDA requires CAP_SYS_ADMIN or nvidia.ko to have PeerMappingOverride=1 set
                  # Since PeerMappingOverride allows workloads to potential impact each other on the
                  # same host, privileged is no less secure.
                  privileged: true # needed to open the host device for UAR ??
                  capabilities:
                    add:
                    - "IPC_LOCK"
                    - "SYS_RAWIO"
                resources:
                  limits:
                    ephemeral-storage: 3Ti
                    nvidia.com/gpu: "8"
                    
                    networking.gke.io.networks/rdma-0: "1"
                    networking.gke.io.networks/rdma-0.IP: "1"
                    networking.gke.io.networks/rdma-1: "1"
                    networking.gke.io.networks/rdma-1.IP: "1"
                    networking.gke.io.networks/rdma-2: "1"
                    networking.gke.io.networks/rdma-2.IP: "1"
                    networking.gke.io.networks/rdma-3: "1"
                    networking.gke.io.networks/rdma-3.IP: "1"
                    networking.gke.io.networks/rdma-4: "1"
                    networking.gke.io.networks/rdma-4.IP: "1"
                    networking.gke.io.networks/rdma-5: "1"
                    networking.gke.io.networks/rdma-5.IP: "1"
                    networking.gke.io.networks/rdma-6: "1"
                    networking.gke.io.networks/rdma-6.IP: "1"
                    networking.gke.io.networks/rdma-7: "1"
                    networking.gke.io.networks/rdma-7.IP: "1"                    
                  requests:
                    cpu: 32
                    memory: 512Gi
                    ephemeral-storage: 3Ti
                    nvidia.com/gpu: "8"

                    networking.gke.io.networks/rdma-0: "1"
                    networking.gke.io.networks/rdma-0.IP: "1"
                    networking.gke.io.networks/rdma-1: "1"
                    networking.gke.io.networks/rdma-1.IP: "1"
                    networking.gke.io.networks/rdma-2: "1"
                    networking.gke.io.networks/rdma-2.IP: "1"
                    networking.gke.io.networks/rdma-3: "1"
                    networking.gke.io.networks/rdma-3.IP: "1"
                    networking.gke.io.networks/rdma-4: "1"
                    networking.gke.io.networks/rdma-4.IP: "1"
                    networking.gke.io.networks/rdma-5: "1"
                    networking.gke.io.networks/rdma-5.IP: "1"
                    networking.gke.io.networks/rdma-6: "1"
                    networking.gke.io.networks/rdma-6.IP: "1"
                    networking.gke.io.networks/rdma-7: "1"
                    networking.gke.io.networks/rdma-7.IP: "1"
                volumeMounts:
                  - name: shm
                    mountPath: /dev/shm
                  - name: init-scripts-volume
                    mountPath: /init-scripts
                  - name: hf-cache
                    mountPath: /huggingface-cache
                  - name: nv-compute-cache
                    mountPath: /root/.nv/ComputeCache
                  - name: vllm
                    mountPath: /code
                  # Required to access the gIB configuration for NCCL on GKE
                  - mountPath: /usr/local/gib
                    name: gib

              volumes:
                # Volume for the init script from ConfigMap
                - name: init-scripts-volume
                  configMap:
                    name: vllm-init-scripts-config
                    defaultMode: 0755 # Set execute permissions for the script
                    optional: true
                # Needed for NCCL to function
                - name: shm
                  emptyDir:
                    medium: Memory
                    # Verified that we need about 2Gi to start on NCCL 2.27
                    sizeLimit: 3Gi
                # Use a cache directory across pods on the SSD to avoid redownloading large models
                - name: hf-cache
                  hostPath:
                    path: /mnt/stateful_partition/kube-ephemeral-ssd/shared_disk/hfcache/
                    type: DirectoryOrCreate
                # Use a cache directory across pods on the SSD to avoid recompiling kernels
                # Note: there are occasionally bugs in compilation cache hashing that may trigger
                - name: nv-compute-cache
                  hostPath:
                    path: /mnt/stateful_partition/kube-ephemeral-ssd/shared_disk/nv-compute-cache
                    type: DirectoryOrCreate
                # Necessary for gIB
                - name: gib
                  hostPath:
                    path: /home/kubernetes/bin/gib
                    type: ""
                # Scratch directory for the workload
                - name: vllm
                  emptyDir: {}
